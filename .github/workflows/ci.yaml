name: CI

on:
  push:
    branches-ignore:
      - 'l10n_main'
      - 'dependabot/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tests:
    name: Run tests

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
        os:
          - ubuntu-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --no-ansi

      - name: Run test suite
        env:
          TOUR_GUIDE_TELEGRAM_BOT_TOKEN: ${{ secrets.TOUR_GUIDE_TELEGRAM_BOT_TOKEN }}
          TOUR_GUIDE_TELEGRAM_APP_SESSION_STRING: ${{ secrets.TOUR_GUIDE_TELEGRAM_APP_SESSION_STRING }}
          TOUR_GUIDE_TELEGRAM_APP_API_ID: ${{ secrets.TOUR_GUIDE_TELEGRAM_APP_API_ID }}
          TOUR_GUIDE_TELEGRAM_APP_API_HASH: ${{ secrets.TOUR_GUIDE_TELEGRAM_APP_API_HASH }}
        run: |
          poetry run pytest --cov=tour_guide_bot --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build-and-push-docker-image:
    name: Docker image

    runs-on: ubuntu-latest
    needs: [tests]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}'
          tags: |
            # set latest tag for default branch
            type=schedule,pattern=nightly,enable=true,priority=1000
            type=raw,value=latest,enable={{is_default_branch}},priority=700
            type=ref,event=branch,enable=true,priority=600
            type=ref,event=tag,enable=true,priority=600
            type=ref,event=pr,prefix=pr-,enable=true,priority=600

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: '${{ steps.meta.outputs.tags }}'
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
